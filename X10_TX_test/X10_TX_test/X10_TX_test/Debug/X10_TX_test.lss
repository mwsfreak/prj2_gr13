
X10_TX_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000003f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000382  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800200  00800200  000003f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000428  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000127a  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ed6  00000000  00000000  00001742  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006eb  00000000  00000000  00002618  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  00002d04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000070a  00000000  00000000  00002de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000325  00000000  00000000  000034ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000380f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	72 c0       	rjmp	.+228    	; 0xe6 <__ctors_end>
   2:	00 00       	nop
   4:	87 c1       	rjmp	.+782    	; 0x314 <__vector_1>
   6:	00 00       	nop
   8:	8f c0       	rjmp	.+286    	; 0x128 <__bad_interrupt>
   a:	00 00       	nop
   c:	8d c0       	rjmp	.+282    	; 0x128 <__bad_interrupt>
   e:	00 00       	nop
  10:	8b c0       	rjmp	.+278    	; 0x128 <__bad_interrupt>
  12:	00 00       	nop
  14:	89 c0       	rjmp	.+274    	; 0x128 <__bad_interrupt>
  16:	00 00       	nop
  18:	87 c0       	rjmp	.+270    	; 0x128 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	85 c0       	rjmp	.+266    	; 0x128 <__bad_interrupt>
  1e:	00 00       	nop
  20:	83 c0       	rjmp	.+262    	; 0x128 <__bad_interrupt>
  22:	00 00       	nop
  24:	81 c0       	rjmp	.+258    	; 0x128 <__bad_interrupt>
  26:	00 00       	nop
  28:	7f c0       	rjmp	.+254    	; 0x128 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7d c0       	rjmp	.+250    	; 0x128 <__bad_interrupt>
  2e:	00 00       	nop
  30:	7b c0       	rjmp	.+246    	; 0x128 <__bad_interrupt>
  32:	00 00       	nop
  34:	79 c0       	rjmp	.+242    	; 0x128 <__bad_interrupt>
  36:	00 00       	nop
  38:	77 c0       	rjmp	.+238    	; 0x128 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	75 c0       	rjmp	.+234    	; 0x128 <__bad_interrupt>
  3e:	00 00       	nop
  40:	73 c0       	rjmp	.+230    	; 0x128 <__bad_interrupt>
  42:	00 00       	nop
  44:	71 c0       	rjmp	.+226    	; 0x128 <__bad_interrupt>
  46:	00 00       	nop
  48:	6f c0       	rjmp	.+222    	; 0x128 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6d c0       	rjmp	.+218    	; 0x128 <__bad_interrupt>
  4e:	00 00       	nop
  50:	6b c0       	rjmp	.+214    	; 0x128 <__bad_interrupt>
  52:	00 00       	nop
  54:	69 c0       	rjmp	.+210    	; 0x128 <__bad_interrupt>
  56:	00 00       	nop
  58:	67 c0       	rjmp	.+206    	; 0x128 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	65 c0       	rjmp	.+202    	; 0x128 <__bad_interrupt>
  5e:	00 00       	nop
  60:	63 c0       	rjmp	.+198    	; 0x128 <__bad_interrupt>
  62:	00 00       	nop
  64:	61 c0       	rjmp	.+194    	; 0x128 <__bad_interrupt>
  66:	00 00       	nop
  68:	5f c0       	rjmp	.+190    	; 0x128 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5d c0       	rjmp	.+186    	; 0x128 <__bad_interrupt>
  6e:	00 00       	nop
  70:	5b c0       	rjmp	.+182    	; 0x128 <__bad_interrupt>
  72:	00 00       	nop
  74:	59 c0       	rjmp	.+178    	; 0x128 <__bad_interrupt>
  76:	00 00       	nop
  78:	57 c0       	rjmp	.+174    	; 0x128 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	55 c0       	rjmp	.+170    	; 0x128 <__bad_interrupt>
  7e:	00 00       	nop
  80:	53 c0       	rjmp	.+166    	; 0x128 <__bad_interrupt>
  82:	00 00       	nop
  84:	51 c0       	rjmp	.+162    	; 0x128 <__bad_interrupt>
  86:	00 00       	nop
  88:	4f c0       	rjmp	.+158    	; 0x128 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4d c0       	rjmp	.+154    	; 0x128 <__bad_interrupt>
  8e:	00 00       	nop
  90:	4b c0       	rjmp	.+150    	; 0x128 <__bad_interrupt>
  92:	00 00       	nop
  94:	49 c0       	rjmp	.+146    	; 0x128 <__bad_interrupt>
  96:	00 00       	nop
  98:	47 c0       	rjmp	.+142    	; 0x128 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	45 c0       	rjmp	.+138    	; 0x128 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	43 c0       	rjmp	.+134    	; 0x128 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	41 c0       	rjmp	.+130    	; 0x128 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3f c0       	rjmp	.+126    	; 0x128 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3d c0       	rjmp	.+122    	; 0x128 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	3b c0       	rjmp	.+118    	; 0x128 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	39 c0       	rjmp	.+114    	; 0x128 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	37 c0       	rjmp	.+110    	; 0x128 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	35 c0       	rjmp	.+106    	; 0x128 <__bad_interrupt>
  be:	00 00       	nop
  c0:	33 c0       	rjmp	.+102    	; 0x128 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	31 c0       	rjmp	.+98     	; 0x128 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2f c0       	rjmp	.+94     	; 0x128 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2d c0       	rjmp	.+90     	; 0x128 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	2b c0       	rjmp	.+86     	; 0x128 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	29 c0       	rjmp	.+82     	; 0x128 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	27 c0       	rjmp	.+78     	; 0x128 <__bad_interrupt>
  da:	00 00       	nop
  dc:	25 c0       	rjmp	.+74     	; 0x128 <__bad_interrupt>
  de:	00 00       	nop
  e0:	23 c0       	rjmp	.+70     	; 0x128 <__bad_interrupt>
	...

000000e4 <__ctors_start>:
  e4:	b3 01       	movw	r22, r6

000000e6 <__ctors_end>:
  e6:	11 24       	eor	r1, r1
  e8:	1f be       	out	0x3f, r1	; 63
  ea:	cf ef       	ldi	r28, 0xFF	; 255
  ec:	d1 e2       	ldi	r29, 0x21	; 33
  ee:	de bf       	out	0x3e, r29	; 62
  f0:	cd bf       	out	0x3d, r28	; 61
  f2:	00 e0       	ldi	r16, 0x00	; 0
  f4:	0c bf       	out	0x3c, r16	; 60

000000f6 <__do_clear_bss>:
  f6:	22 e0       	ldi	r18, 0x02	; 2
  f8:	a0 e0       	ldi	r26, 0x00	; 0
  fa:	b2 e0       	ldi	r27, 0x02	; 2
  fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
  fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
 100:	a3 31       	cpi	r26, 0x13	; 19
 102:	b2 07       	cpc	r27, r18
 104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>

00000106 <__do_global_ctors>:
 106:	10 e0       	ldi	r17, 0x00	; 0
 108:	c3 e7       	ldi	r28, 0x73	; 115
 10a:	d0 e0       	ldi	r29, 0x00	; 0
 10c:	00 e0       	ldi	r16, 0x00	; 0
 10e:	05 c0       	rjmp	.+10     	; 0x11a <__do_global_ctors+0x14>
 110:	21 97       	sbiw	r28, 0x01	; 1
 112:	01 09       	sbc	r16, r1
 114:	80 2f       	mov	r24, r16
 116:	fe 01       	movw	r30, r28
 118:	2a d1       	rcall	.+596    	; 0x36e <__tablejump2__>
 11a:	c2 37       	cpi	r28, 0x72	; 114
 11c:	d1 07       	cpc	r29, r17
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	08 07       	cpc	r16, r24
 122:	b1 f7       	brne	.-20     	; 0x110 <__do_global_ctors+0xa>
 124:	ab d0       	rcall	.+342    	; 0x27c <main>
 126:	2b c1       	rjmp	.+598    	; 0x37e <_exit>

00000128 <__bad_interrupt>:
 128:	6b cf       	rjmp	.-298    	; 0x0 <__vectors>

0000012a <_ZN6X10_TXC1Ev>:

#define F_CPU 16000000
#include <util/delay.h>

// default constructor
X10_TX::X10_TX() {
 12a:	dc 01       	movw	r26, r24
	burstIndex_ = 0;
 12c:	51 96       	adiw	r26, 0x11	; 17
 12e:	1c 92       	st	X, r1
 130:	1e 92       	st	-X, r1
 132:	50 97       	sbiw	r26, 0x10	; 16
	dataReady_ = 0;
 134:	52 96       	adiw	r26, 0x12	; 18
 136:	1c 92       	st	X, r1
 138:	52 97       	sbiw	r26, 0x12	; 18
	
	burstTrain_[0] = 1;
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	8c 93       	st	X, r24
	burstTrain_[1] = 1;
 13e:	11 96       	adiw	r26, 0x01	; 1
 140:	8c 93       	st	X, r24
 142:	11 97       	sbiw	r26, 0x01	; 1
	burstTrain_[2] = 1;
 144:	12 96       	adiw	r26, 0x02	; 2
 146:	8c 93       	st	X, r24
 148:	12 97       	sbiw	r26, 0x02	; 2
	burstTrain_[3] = 0;
 14a:	13 96       	adiw	r26, 0x03	; 3
 14c:	1c 92       	st	X, r1
 14e:	13 97       	sbiw	r26, 0x03	; 3
 150:	fd 01       	movw	r30, r26
 152:	34 96       	adiw	r30, 0x04	; 4
 154:	cd 01       	movw	r24, r26
 156:	40 96       	adiw	r24, 0x10	; 16

	for (int i = 4; i <= 15; i++) {
		burstTrain_[i] = 0;
 158:	11 92       	st	Z+, r1
	burstTrain_[0] = 1;
	burstTrain_[1] = 1;
	burstTrain_[2] = 1;
	burstTrain_[3] = 0;

	for (int i = 4; i <= 15; i++) {
 15a:	e8 17       	cp	r30, r24
 15c:	f9 07       	cpc	r31, r25
 15e:	e1 f7       	brne	.-8      	; 0x158 <_ZN6X10_TXC1Ev+0x2e>
		burstTrain_[i] = 0;
	}
	
	EICRA = 0b00000001;
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
	EIMSK = 0b00000001;
 166:	8d bb       	out	0x1d, r24	; 29
	sei();
 168:	78 94       	sei
	
	// PB outputs and all LEDs off
	DDRB = 0xFF;
 16a:	8f ef       	ldi	r24, 0xFF	; 255
 16c:	84 b9       	out	0x04, r24	; 4
	PORTB = 0;
 16e:	15 b8       	out	0x05, r1	; 5
	
	// Toggle OC1A on compare match
	// Mode = 4 (CTC)
	// Clock prescaler = 1
	TCCR1A = 0b01000000;
 170:	80 e4       	ldi	r24, 0x40	; 64
 172:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
	TCCR1B = 0b00001000;
 176:	88 e0       	ldi	r24, 0x08	; 8
 178:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	
	// Frekvens = 0,5 Hz
	// 120000 = 16000000/(2*1*(1+OCR1A))
	OCR1A =66;
 17c:	82 e4       	ldi	r24, 0x42	; 66
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 184:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
 188:	08 95       	ret

0000018a <_ZN6X10_TX8transmitEcc>:
}

bool X10_TX::transmit(char address, char command) {
 18a:	fc 01       	movw	r30, r24
	
	
	
	if ((command == 0) || (command > 15) || (address > 3)) {
 18c:	8f ef       	ldi	r24, 0xFF	; 255
 18e:	84 0f       	add	r24, r20
 190:	8f 30       	cpi	r24, 0x0F	; 15
 192:	10 f4       	brcc	.+4      	; 0x198 <_ZN6X10_TX8transmitEcc+0xe>
 194:	64 30       	cpi	r22, 0x04	; 4
 196:	18 f0       	brcs	.+6      	; 0x19e <_ZN6X10_TX8transmitEcc+0x14>
		dataReady_ = 0;
 198:	12 8a       	std	Z+18, r1	; 0x12
		return false;
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	08 95       	ret
	} else {	
		if ((address & 0b10) > 0) {
 19e:	61 ff       	sbrs	r22, 1
 1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_ZN6X10_TX8transmitEcc+0x20>
			burstTrain_[4] = 1;
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	84 83       	std	Z+4, r24	; 0x04
			burstTrain_[5] = 0;
 1a6:	15 82       	std	Z+5, r1	; 0x05
 1a8:	03 c0       	rjmp	.+6      	; 0x1b0 <_ZN6X10_TX8transmitEcc+0x26>
		} else {
			burstTrain_[4] = 0;
 1aa:	14 82       	std	Z+4, r1	; 0x04
			burstTrain_[5] = 1;
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	85 83       	std	Z+5, r24	; 0x05
		}
		
		if ((address & 0b01) > 0) {
 1b0:	60 ff       	sbrs	r22, 0
 1b2:	04 c0       	rjmp	.+8      	; 0x1bc <_ZN6X10_TX8transmitEcc+0x32>
			burstTrain_[6] = 1;
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	86 83       	std	Z+6, r24	; 0x06
			burstTrain_[7] = 0;
 1b8:	17 82       	std	Z+7, r1	; 0x07
 1ba:	03 c0       	rjmp	.+6      	; 0x1c2 <_ZN6X10_TX8transmitEcc+0x38>
		} else {
			burstTrain_[6] = 0;
 1bc:	16 82       	std	Z+6, r1	; 0x06
			burstTrain_[7] = 1;
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	87 83       	std	Z+7, r24	; 0x07
		}
		
		if ((command & 0b1000) > 0) {
 1c2:	43 ff       	sbrs	r20, 3
 1c4:	04 c0       	rjmp	.+8      	; 0x1ce <_ZN6X10_TX8transmitEcc+0x44>
			burstTrain_[8] = 1;
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	80 87       	std	Z+8, r24	; 0x08
			burstTrain_[9] = 0;
 1ca:	11 86       	std	Z+9, r1	; 0x09
 1cc:	03 c0       	rjmp	.+6      	; 0x1d4 <_ZN6X10_TX8transmitEcc+0x4a>
		} else {
			burstTrain_[8] = 0;
 1ce:	10 86       	std	Z+8, r1	; 0x08
			burstTrain_[9] = 1;
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	81 87       	std	Z+9, r24	; 0x09
		}
		
		if ((command & 0b0100) > 0) {
 1d4:	42 ff       	sbrs	r20, 2
 1d6:	04 c0       	rjmp	.+8      	; 0x1e0 <_ZN6X10_TX8transmitEcc+0x56>
			burstTrain_[10] = 1;
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	82 87       	std	Z+10, r24	; 0x0a
			burstTrain_[11] = 0;
 1dc:	13 86       	std	Z+11, r1	; 0x0b
 1de:	03 c0       	rjmp	.+6      	; 0x1e6 <_ZN6X10_TX8transmitEcc+0x5c>
		} else {
			burstTrain_[10] = 0;
 1e0:	12 86       	std	Z+10, r1	; 0x0a
			burstTrain_[11] = 1;
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	83 87       	std	Z+11, r24	; 0x0b
		}
		
		if ((command & 0b0010) > 0) {
 1e6:	41 ff       	sbrs	r20, 1
 1e8:	04 c0       	rjmp	.+8      	; 0x1f2 <_ZN6X10_TX8transmitEcc+0x68>
			burstTrain_[12] = 1;
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	84 87       	std	Z+12, r24	; 0x0c
			burstTrain_[13] = 0;
 1ee:	15 86       	std	Z+13, r1	; 0x0d
 1f0:	03 c0       	rjmp	.+6      	; 0x1f8 <_ZN6X10_TX8transmitEcc+0x6e>
		} else {
			burstTrain_[12] = 0;
 1f2:	14 86       	std	Z+12, r1	; 0x0c
			burstTrain_[13] = 1;
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	85 87       	std	Z+13, r24	; 0x0d
		}
		
		if ((command & 0b0001) > 0) {
 1f8:	40 ff       	sbrs	r20, 0
 1fa:	04 c0       	rjmp	.+8      	; 0x204 <_ZN6X10_TX8transmitEcc+0x7a>
			burstTrain_[14] = 1;
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	86 87       	std	Z+14, r24	; 0x0e
			burstTrain_[15] = 0;
 200:	17 86       	std	Z+15, r1	; 0x0f
 202:	03 c0       	rjmp	.+6      	; 0x20a <_ZN6X10_TX8transmitEcc+0x80>
		} else {
			burstTrain_[14] = 0;
 204:	16 86       	std	Z+14, r1	; 0x0e
			burstTrain_[15] = 1;
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	87 87       	std	Z+15, r24	; 0x0f
		}
		
		dataReady_ = 1;
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	82 8b       	std	Z+18, r24	; 0x12
		return true;
	}
	
}
 20e:	08 95       	ret

00000210 <_ZN6X10_TX16x10_tx_interruptEv>:
	
	
void X10_TX::x10_tx_interrupt() {		//Interruptrutine for Zerocrossing - Tjek syntaks!
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	fc 01       	movw	r30, r24
	
	EIMSK = 0b00000000;		//Disable interrupt
 216:	1d ba       	out	0x1d, r1	; 29
							//nulstil evt watchdog timer for interrupt
	if (dataReady_) {
 218:	82 89       	ldd	r24, Z+18	; 0x12
 21a:	88 23       	and	r24, r24
 21c:	49 f1       	breq	.+82     	; 0x270 <_ZN6X10_TX16x10_tx_interruptEv+0x60>
		if (burstTrain_[burstIndex_]) {
 21e:	a0 89       	ldd	r26, Z+16	; 0x10
 220:	b1 89       	ldd	r27, Z+17	; 0x11
 222:	ae 0f       	add	r26, r30
 224:	bf 1f       	adc	r27, r31
 226:	8c 91       	ld	r24, X
 228:	88 23       	and	r24, r24
 22a:	b1 f0       	breq	.+44     	; 0x258 <_ZN6X10_TX16x10_tx_interruptEv+0x48>

			TCCR1A |= 0b01000000;		//aktiver timer output
 22c:	c0 e8       	ldi	r28, 0x80	; 128
 22e:	d0 e0       	ldi	r29, 0x00	; 0
 230:	88 81       	ld	r24, Y
 232:	80 64       	ori	r24, 0x40	; 64
 234:	88 83       	st	Y, r24
			TCCR1B |= 0b00001001;		//aktiver timer clock
 236:	a1 e8       	ldi	r26, 0x81	; 129
 238:	b0 e0       	ldi	r27, 0x00	; 0
 23a:	8c 91       	ld	r24, X
 23c:	89 60       	ori	r24, 0x09	; 9
 23e:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 240:	8f e9       	ldi	r24, 0x9F	; 159
 242:	9f e0       	ldi	r25, 0x0F	; 15
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <_ZN6X10_TX16x10_tx_interruptEv+0x34>
 248:	00 c0       	rjmp	.+0      	; 0x24a <_ZN6X10_TX16x10_tx_interruptEv+0x3a>
 24a:	00 00       	nop

			_delay_us(1000);	//(eller brug en timer? evt. watchdog?)
		
			TCCR1A &= ~(0b11000000);		//deaktiver timer output
 24c:	88 81       	ld	r24, Y
 24e:	8f 73       	andi	r24, 0x3F	; 63
 250:	88 83       	st	Y, r24
			TCCR1B &= ~(0b00000111);		//deaktiver timer clock
 252:	8c 91       	ld	r24, X
 254:	88 7f       	andi	r24, 0xF8	; 248
 256:	8c 93       	st	X, r24
		}
	
		if ( burstIndex_ >= 15) {
 258:	80 89       	ldd	r24, Z+16	; 0x10
 25a:	91 89       	ldd	r25, Z+17	; 0x11
 25c:	8f 30       	cpi	r24, 0x0F	; 15
 25e:	91 05       	cpc	r25, r1
 260:	24 f0       	brlt	.+8      	; 0x26a <_ZN6X10_TX16x10_tx_interruptEv+0x5a>
			burstIndex_ = 0;
 262:	11 8a       	std	Z+17, r1	; 0x11
 264:	10 8a       	std	Z+16, r1	; 0x10
			dataReady_ = 0;
 266:	12 8a       	std	Z+18, r1	; 0x12
 268:	03 c0       	rjmp	.+6      	; 0x270 <_ZN6X10_TX16x10_tx_interruptEv+0x60>
		}
		else {
			burstIndex_++;
 26a:	01 96       	adiw	r24, 0x01	; 1
 26c:	91 8b       	std	Z+17, r25	; 0x11
 26e:	80 8b       	std	Z+16, r24	; 0x10
		}
	}
		
	EIFR = 0b00000001;			//Clear interrupt flags
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	8c bb       	out	0x1c, r24	; 28
	EIMSK = 0b00000001;			//Enable INT0
 274:	8d bb       	out	0x1d, r24	; 29
 276:	df 91       	pop	r29
 278:	cf 91       	pop	r28
 27a:	08 95       	ret

0000027c <main>:

X10_TX X10TX_obj;

int main(void) {
	
	DDRB |= (1 << 7);
 27c:	27 9a       	sbi	0x04, 7	; 4
	
	while(1) {
		X10TX_obj.transmit(0b10, 0b0010);
 27e:	42 e0       	ldi	r20, 0x02	; 2
 280:	62 e0       	ldi	r22, 0x02	; 2
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	92 e0       	ldi	r25, 0x02	; 2
 286:	81 df       	rcall	.-254    	; 0x18a <_ZN6X10_TX8transmitEcc>
		PORTB |= (1 << 7);
 288:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28a:	2f ef       	ldi	r18, 0xFF	; 255
 28c:	83 ed       	ldi	r24, 0xD3	; 211
 28e:	90 e3       	ldi	r25, 0x30	; 48
 290:	21 50       	subi	r18, 0x01	; 1
 292:	80 40       	sbci	r24, 0x00	; 0
 294:	90 40       	sbci	r25, 0x00	; 0
 296:	e1 f7       	brne	.-8      	; 0x290 <main+0x14>
 298:	00 c0       	rjmp	.+0      	; 0x29a <main+0x1e>
 29a:	00 00       	nop
		_delay_ms(1000);
		
		X10TX_obj.transmit(0b10, 0b0001);
 29c:	41 e0       	ldi	r20, 0x01	; 1
 29e:	62 e0       	ldi	r22, 0x02	; 2
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	92 e0       	ldi	r25, 0x02	; 2
 2a4:	72 df       	rcall	.-284    	; 0x18a <_ZN6X10_TX8transmitEcc>
		PORTB &= ~(1 << 7);
 2a6:	2f 98       	cbi	0x05, 7	; 5
 2a8:	2f ef       	ldi	r18, 0xFF	; 255
 2aa:	83 ed       	ldi	r24, 0xD3	; 211
 2ac:	90 e3       	ldi	r25, 0x30	; 48
 2ae:	21 50       	subi	r18, 0x01	; 1
 2b0:	80 40       	sbci	r24, 0x00	; 0
 2b2:	90 40       	sbci	r25, 0x00	; 0
 2b4:	e1 f7       	brne	.-8      	; 0x2ae <main+0x32>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <main+0x3c>
 2b8:	00 00       	nop
		_delay_ms(1000);
		
		X10TX_obj.transmit(0b10, 0b1001);
 2ba:	49 e0       	ldi	r20, 0x09	; 9
 2bc:	62 e0       	ldi	r22, 0x02	; 2
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	92 e0       	ldi	r25, 0x02	; 2
 2c2:	63 df       	rcall	.-314    	; 0x18a <_ZN6X10_TX8transmitEcc>
		PORTB |= (1 << 7);
 2c4:	2f 9a       	sbi	0x05, 7	; 5
 2c6:	2f ef       	ldi	r18, 0xFF	; 255
 2c8:	83 ed       	ldi	r24, 0xD3	; 211
 2ca:	90 e3       	ldi	r25, 0x30	; 48
 2cc:	21 50       	subi	r18, 0x01	; 1
 2ce:	80 40       	sbci	r24, 0x00	; 0
 2d0:	90 40       	sbci	r25, 0x00	; 0
 2d2:	e1 f7       	brne	.-8      	; 0x2cc <main+0x50>
 2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <main+0x5a>
 2d6:	00 00       	nop
		_delay_ms(1000);
		
		X10TX_obj.transmit(0b10, 0b1101);
 2d8:	4d e0       	ldi	r20, 0x0D	; 13
 2da:	62 e0       	ldi	r22, 0x02	; 2
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	92 e0       	ldi	r25, 0x02	; 2
 2e0:	54 df       	rcall	.-344    	; 0x18a <_ZN6X10_TX8transmitEcc>
		PORTB &= ~(1 << 7);
 2e2:	2f 98       	cbi	0x05, 7	; 5
 2e4:	2f ef       	ldi	r18, 0xFF	; 255
 2e6:	83 ed       	ldi	r24, 0xD3	; 211
 2e8:	90 e3       	ldi	r25, 0x30	; 48
 2ea:	21 50       	subi	r18, 0x01	; 1
 2ec:	80 40       	sbci	r24, 0x00	; 0
 2ee:	90 40       	sbci	r25, 0x00	; 0
 2f0:	e1 f7       	brne	.-8      	; 0x2ea <main+0x6e>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <main+0x78>
 2f4:	00 00       	nop
		_delay_ms(1000);
		
		X10TX_obj.transmit(0b10, 0b1110);
 2f6:	4e e0       	ldi	r20, 0x0E	; 14
 2f8:	62 e0       	ldi	r22, 0x02	; 2
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	92 e0       	ldi	r25, 0x02	; 2
 2fe:	45 df       	rcall	.-374    	; 0x18a <_ZN6X10_TX8transmitEcc>
 300:	2f ef       	ldi	r18, 0xFF	; 255
 302:	83 ed       	ldi	r24, 0xD3	; 211
 304:	90 e3       	ldi	r25, 0x30	; 48
 306:	21 50       	subi	r18, 0x01	; 1
 308:	80 40       	sbci	r24, 0x00	; 0
 30a:	90 40       	sbci	r25, 0x00	; 0
 30c:	e1 f7       	brne	.-8      	; 0x306 <main+0x8a>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <main+0x94>
 310:	00 00       	nop
 312:	b5 cf       	rjmp	.-150    	; 0x27e <main+0x2>

00000314 <__vector_1>:
		
	}

}

ISR(INT0_vect) {
 314:	1f 92       	push	r1
 316:	0f 92       	push	r0
 318:	0f b6       	in	r0, 0x3f	; 63
 31a:	0f 92       	push	r0
 31c:	11 24       	eor	r1, r1
 31e:	0b b6       	in	r0, 0x3b	; 59
 320:	0f 92       	push	r0
 322:	2f 93       	push	r18
 324:	3f 93       	push	r19
 326:	4f 93       	push	r20
 328:	5f 93       	push	r21
 32a:	6f 93       	push	r22
 32c:	7f 93       	push	r23
 32e:	8f 93       	push	r24
 330:	9f 93       	push	r25
 332:	af 93       	push	r26
 334:	bf 93       	push	r27
 336:	ef 93       	push	r30
 338:	ff 93       	push	r31
	
	X10TX_obj.x10_tx_interrupt();
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	92 e0       	ldi	r25, 0x02	; 2
 33e:	68 df       	rcall	.-304    	; 0x210 <_ZN6X10_TX16x10_tx_interruptEv>
 340:	ff 91       	pop	r31
 342:	ef 91       	pop	r30
 344:	bf 91       	pop	r27
 346:	af 91       	pop	r26
 348:	9f 91       	pop	r25
 34a:	8f 91       	pop	r24
 34c:	7f 91       	pop	r23
 34e:	6f 91       	pop	r22
 350:	5f 91       	pop	r21
 352:	4f 91       	pop	r20
 354:	3f 91       	pop	r19
 356:	2f 91       	pop	r18
 358:	0f 90       	pop	r0
 35a:	0b be       	out	0x3b, r0	; 59
 35c:	0f 90       	pop	r0
 35e:	0f be       	out	0x3f, r0	; 63
 360:	0f 90       	pop	r0
 362:	1f 90       	pop	r1
 364:	18 95       	reti

00000366 <_GLOBAL__sub_I_X10TX_obj>:
#include "X10_TX.h"

#define F_CPU 16000000
#include <util/delay.h>

X10_TX X10TX_obj;
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	92 e0       	ldi	r25, 0x02	; 2
 36a:	df ce       	rjmp	.-578    	; 0x12a <_ZN6X10_TXC1Ev>
 36c:	08 95       	ret

0000036e <__tablejump2__>:
 36e:	ee 0f       	add	r30, r30
 370:	ff 1f       	adc	r31, r31
 372:	88 1f       	adc	r24, r24
 374:	8b bf       	out	0x3b, r24	; 59
 376:	07 90       	elpm	r0, Z+
 378:	f6 91       	elpm	r31, Z
 37a:	e0 2d       	mov	r30, r0
 37c:	19 94       	eijmp

0000037e <_exit>:
 37e:	f8 94       	cli

00000380 <__stop_program>:
 380:	ff cf       	rjmp	.-2      	; 0x380 <__stop_program>
