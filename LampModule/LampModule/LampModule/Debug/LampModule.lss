
LampModule.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  00000418  0000048c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000418  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000048e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000014cc  00000000  00000000  00000590  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000feb  00000000  00000000  00001a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000718  00000000  00000000  00002a47  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f8  00000000  00000000  00003160  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007d1  00000000  00000000  00003258  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003eb  00000000  00000000  00003a29  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00003e14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	f8 c1       	rjmp	.+1008   	; 0x3f6 <__vector_1>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 e1       	ldi	r30, 0x18	; 24
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 30       	cpi	r26, 0x02	; 2
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	28 d1       	rcall	.+592    	; 0x360 <main>
 110:	81 c1       	rjmp	.+770    	; 0x414 <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <_ZN10lampDriverC1Ev>:
#include "lampDriver.h"
#include <avr/io.h>

lampDriver::lampDriver()
{
	DDRH |= 1<<4;
 114:	e1 e0       	ldi	r30, 0x01	; 1
 116:	f1 e0       	ldi	r31, 0x01	; 1
 118:	80 81       	ld	r24, Z
 11a:	80 61       	ori	r24, 0x10	; 16
 11c:	80 83       	st	Z, r24
	PORTH &= ~(1<<4);
 11e:	e2 e0       	ldi	r30, 0x02	; 2
 120:	f1 e0       	ldi	r31, 0x01	; 1
 122:	80 81       	ld	r24, Z
 124:	8f 7e       	andi	r24, 0xEF	; 239
 126:	80 83       	st	Z, r24
 128:	08 95       	ret

0000012a <_ZN10lampDriver9turnOnLEDEv>:
	return;
}

void lampDriver::turnOnLED()
{
	PORTH |= 1<<4;
 12a:	e2 e0       	ldi	r30, 0x02	; 2
 12c:	f1 e0       	ldi	r31, 0x01	; 1
 12e:	80 81       	ld	r24, Z
 130:	80 61       	ori	r24, 0x10	; 16
 132:	80 83       	st	Z, r24
 134:	08 95       	ret

00000136 <_ZN10lampDriver10turnOffLEDEv>:
	return;
}

void lampDriver::turnOffLED()
{
	PORTH &= ~(1<<4);
 136:	e2 e0       	ldi	r30, 0x02	; 2
 138:	f1 e0       	ldi	r31, 0x01	; 1
 13a:	80 81       	ld	r24, Z
 13c:	8f 7e       	andi	r24, 0xEF	; 239
 13e:	80 83       	st	Z, r24
 140:	08 95       	ret

00000142 <_ZN6X10_RXC1Ei>:
 *  Author: HansK
 */ 
#include "X10_RX.h"
#include <avr/io.h>

X10_RX::X10_RX(int address)
 142:	dc 01       	movw	r26, r24
{
	EICRA = 0b00000001; //Interrupt 0 aktiveres på rising edge og falling edge
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
	EIMSK = 0b00000001; // Interrupt 0 enables
 14a:	8d bb       	out	0x1d, r24	; 29
	DDRH &= ~(1<<5); // PORTH5 (pin 8) sættes til at være input 
 14c:	e1 e0       	ldi	r30, 0x01	; 1
 14e:	f1 e0       	ldi	r31, 0x01	; 1
 150:	80 81       	ld	r24, Z
 152:	8f 7d       	andi	r24, 0xDF	; 223
 154:	80 83       	st	Z, r24
	
	bitCnt_ = 0;
 156:	57 96       	adiw	r26, 0x17	; 23
 158:	1c 92       	st	X, r1
 15a:	1e 92       	st	-X, r1
 15c:	56 97       	sbiw	r26, 0x16	; 22
	receivingData_ = false;
 15e:	55 96       	adiw	r26, 0x15	; 21
 160:	1c 92       	st	X, r1
 162:	55 97       	sbiw	r26, 0x15	; 21
 164:	cd 01       	movw	r24, r26
 166:	08 96       	adiw	r24, 0x08	; 8
 168:	9d 01       	movw	r18, r26
 16a:	20 5f       	subi	r18, 0xF0	; 240
 16c:	3f 4f       	sbci	r19, 0xFF	; 255
 16e:	fc 01       	movw	r30, r24

	// rawData initialiseres
	for (int i = 0; i < 8; i++)
	{
		rawData_[i] = false;
 170:	11 92       	st	Z+, r1
	
	bitCnt_ = 0;
	receivingData_ = false;

	// rawData initialiseres
	for (int i = 0; i < 8; i++)
 172:	2e 17       	cp	r18, r30
 174:	3f 07       	cpc	r19, r31
 176:	e1 f7       	brne	.-8      	; 0x170 <_ZN6X10_RXC1Ei+0x2e>
		rawData_[i] = false;
	}
	// convertedData initialiseres
	for (int i = 0; i < 4; i++)
	{
		convertedData_[i] = false;
 178:	50 96       	adiw	r26, 0x10	; 16
 17a:	1c 92       	st	X, r1
 17c:	50 97       	sbiw	r26, 0x10	; 16
 17e:	51 96       	adiw	r26, 0x11	; 17
 180:	1c 92       	st	X, r1
 182:	51 97       	sbiw	r26, 0x11	; 17
 184:	52 96       	adiw	r26, 0x12	; 18
 186:	1c 92       	st	X, r1
 188:	52 97       	sbiw	r26, 0x12	; 18
 18a:	53 96       	adiw	r26, 0x13	; 19
 18c:	1c 92       	st	X, r1
 18e:	53 97       	sbiw	r26, 0x13	; 19
 190:	fd 01       	movw	r30, r26
	}
	// startBuffer initialiseres
	for (int i = 0; i < 8; i++)
	{
		startBuffer_[i] = false;
 192:	11 92       	st	Z+, r1
	for (int i = 0; i < 4; i++)
	{
		convertedData_[i] = false;
	}
	// startBuffer initialiseres
	for (int i = 0; i < 8; i++)
 194:	8e 17       	cp	r24, r30
 196:	9f 07       	cpc	r25, r31
 198:	e1 f7       	brne	.-8      	; 0x192 <_ZN6X10_RXC1Ei+0x50>
	{
		startBuffer_[i] = false;
	}
	
	// start delen startArray initialiseres
	startArray_[0] = 1;
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	59 96       	adiw	r26, 0x19	; 25
 19e:	8c 93       	st	X, r24
 1a0:	59 97       	sbiw	r26, 0x19	; 25
	startArray_[1] = 1;
 1a2:	5a 96       	adiw	r26, 0x1a	; 26
 1a4:	8c 93       	st	X, r24
 1a6:	5a 97       	sbiw	r26, 0x1a	; 26
	startArray_[2] = 1;
 1a8:	5b 96       	adiw	r26, 0x1b	; 27
 1aa:	8c 93       	st	X, r24
 1ac:	5b 97       	sbiw	r26, 0x1b	; 27
	startArray_[3] = 0;
 1ae:	5c 96       	adiw	r26, 0x1c	; 28
 1b0:	1c 92       	st	X, r1
 1b2:	5c 97       	sbiw	r26, 0x1c	; 28
	
	// adresse delen startArray initialiseres
	if (address == 0)
 1b4:	61 15       	cp	r22, r1
 1b6:	71 05       	cpc	r23, r1
 1b8:	61 f4       	brne	.+24     	; 0x1d2 <_ZN6X10_RXC1Ei+0x90>
	{
		startArray_[4] = 0;
 1ba:	5d 96       	adiw	r26, 0x1d	; 29
 1bc:	1c 92       	st	X, r1
 1be:	5d 97       	sbiw	r26, 0x1d	; 29
		startArray_[5] = 1;
 1c0:	5e 96       	adiw	r26, 0x1e	; 30
 1c2:	8c 93       	st	X, r24
 1c4:	5e 97       	sbiw	r26, 0x1e	; 30
		startArray_[6] = 0;
 1c6:	5f 96       	adiw	r26, 0x1f	; 31
 1c8:	1c 92       	st	X, r1
 1ca:	5f 97       	sbiw	r26, 0x1f	; 31
		startArray_[7] = 1;
 1cc:	90 96       	adiw	r26, 0x20	; 32
 1ce:	8c 93       	st	X, r24
 1d0:	08 95       	ret
	}
	else if (address == 1)
 1d2:	61 30       	cpi	r22, 0x01	; 1
 1d4:	71 05       	cpc	r23, r1
 1d6:	69 f4       	brne	.+26     	; 0x1f2 <_ZN6X10_RXC1Ei+0xb0>
	{
		startArray_[4] = 0;
 1d8:	5d 96       	adiw	r26, 0x1d	; 29
 1da:	1c 92       	st	X, r1
 1dc:	5d 97       	sbiw	r26, 0x1d	; 29
		startArray_[5] = 1;
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	5e 96       	adiw	r26, 0x1e	; 30
 1e2:	8c 93       	st	X, r24
 1e4:	5e 97       	sbiw	r26, 0x1e	; 30
		startArray_[6] = 1;
 1e6:	5f 96       	adiw	r26, 0x1f	; 31
 1e8:	8c 93       	st	X, r24
 1ea:	5f 97       	sbiw	r26, 0x1f	; 31
		startArray_[7] = 0;
 1ec:	90 96       	adiw	r26, 0x20	; 32
 1ee:	1c 92       	st	X, r1
 1f0:	08 95       	ret
	}
	else if (address == 2)
 1f2:	62 30       	cpi	r22, 0x02	; 2
 1f4:	71 05       	cpc	r23, r1
 1f6:	69 f4       	brne	.+26     	; 0x212 <_ZN6X10_RXC1Ei+0xd0>
	{
		startArray_[4] = 1;
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	5d 96       	adiw	r26, 0x1d	; 29
 1fc:	8c 93       	st	X, r24
 1fe:	5d 97       	sbiw	r26, 0x1d	; 29
		startArray_[5] = 0;
 200:	5e 96       	adiw	r26, 0x1e	; 30
 202:	1c 92       	st	X, r1
 204:	5e 97       	sbiw	r26, 0x1e	; 30
		startArray_[6] = 0;
 206:	5f 96       	adiw	r26, 0x1f	; 31
 208:	1c 92       	st	X, r1
 20a:	5f 97       	sbiw	r26, 0x1f	; 31
		startArray_[7] = 1;
 20c:	90 96       	adiw	r26, 0x20	; 32
 20e:	8c 93       	st	X, r24
 210:	08 95       	ret
	}
	else if (address == 3)
 212:	63 30       	cpi	r22, 0x03	; 3
 214:	71 05       	cpc	r23, r1
 216:	61 f4       	brne	.+24     	; 0x230 <_ZN6X10_RXC1Ei+0xee>
	{
		startArray_[4] = 1;
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	5d 96       	adiw	r26, 0x1d	; 29
 21c:	8c 93       	st	X, r24
 21e:	5d 97       	sbiw	r26, 0x1d	; 29
		startArray_[5] = 0;
 220:	5e 96       	adiw	r26, 0x1e	; 30
 222:	1c 92       	st	X, r1
 224:	5e 97       	sbiw	r26, 0x1e	; 30
		startArray_[6] = 1;
 226:	5f 96       	adiw	r26, 0x1f	; 31
 228:	8c 93       	st	X, r24
 22a:	5f 97       	sbiw	r26, 0x1f	; 31
		startArray_[7] = 0;
 22c:	90 96       	adiw	r26, 0x20	; 32
 22e:	1c 92       	st	X, r1
 230:	08 95       	ret

00000232 <_ZN6X10_RX11convertDataEv>:
	}
	return newDataReady_;
}

bool X10_RX::convertData()
{
 232:	fc 01       	movw	r30, r24
	// convert databit 0:
	if (rawData_[0] == 0 && rawData_[1] == 1)
 234:	80 85       	ldd	r24, Z+8	; 0x08
 236:	81 11       	cpse	r24, r1
 238:	08 c0       	rjmp	.+16     	; 0x24a <_ZN6X10_RX11convertDataEv+0x18>
 23a:	81 85       	ldd	r24, Z+9	; 0x09
 23c:	88 23       	and	r24, r24
 23e:	09 f4       	brne	.+2      	; 0x242 <_ZN6X10_RX11convertDataEv+0x10>
 240:	42 c0       	rjmp	.+132    	; 0x2c6 <_ZN6X10_RX11convertDataEv+0x94>
	{
		convertedDataChar_ &= ~(1<<3);
 242:	84 89       	ldd	r24, Z+20	; 0x14
 244:	87 7f       	andi	r24, 0xF7	; 247
 246:	84 8b       	std	Z+20, r24	; 0x14
 248:	06 c0       	rjmp	.+12     	; 0x256 <_ZN6X10_RX11convertDataEv+0x24>
	}
	else if (rawData_[0] == 1 && rawData_[1] == 0)
 24a:	81 85       	ldd	r24, Z+9	; 0x09
 24c:	81 11       	cpse	r24, r1
 24e:	34 c0       	rjmp	.+104    	; 0x2b8 <_ZN6X10_RX11convertDataEv+0x86>
	{
		convertedDataChar_ |= (1<<3);
 250:	84 89       	ldd	r24, Z+20	; 0x14
 252:	88 60       	ori	r24, 0x08	; 8
 254:	84 8b       	std	Z+20, r24	; 0x14
	{
		return 0;
	}

	// convert databit 1:
	if (rawData_[2] == 0 && rawData_[3] == 1)
 256:	82 85       	ldd	r24, Z+10	; 0x0a
 258:	81 11       	cpse	r24, r1
 25a:	07 c0       	rjmp	.+14     	; 0x26a <_ZN6X10_RX11convertDataEv+0x38>
 25c:	83 85       	ldd	r24, Z+11	; 0x0b
 25e:	88 23       	and	r24, r24
 260:	91 f1       	breq	.+100    	; 0x2c6 <_ZN6X10_RX11convertDataEv+0x94>
	{
		convertedDataChar_ &= ~(1<<2);
 262:	84 89       	ldd	r24, Z+20	; 0x14
 264:	8b 7f       	andi	r24, 0xFB	; 251
 266:	84 8b       	std	Z+20, r24	; 0x14
 268:	06 c0       	rjmp	.+12     	; 0x276 <_ZN6X10_RX11convertDataEv+0x44>
	}
	else if (rawData_[2] == 1 && rawData_[3] == 0)
 26a:	83 85       	ldd	r24, Z+11	; 0x0b
 26c:	81 11       	cpse	r24, r1
 26e:	26 c0       	rjmp	.+76     	; 0x2bc <_ZN6X10_RX11convertDataEv+0x8a>
	{
		convertedDataChar_ |= (1<<2);
 270:	84 89       	ldd	r24, Z+20	; 0x14
 272:	84 60       	ori	r24, 0x04	; 4
 274:	84 8b       	std	Z+20, r24	; 0x14
	{
		return 0;
	}

	// convert databit 2:
	if (rawData_[4] == 0 && rawData_[5] == 1)
 276:	84 85       	ldd	r24, Z+12	; 0x0c
 278:	81 11       	cpse	r24, r1
 27a:	07 c0       	rjmp	.+14     	; 0x28a <_ZN6X10_RX11convertDataEv+0x58>
 27c:	85 85       	ldd	r24, Z+13	; 0x0d
 27e:	88 23       	and	r24, r24
 280:	11 f1       	breq	.+68     	; 0x2c6 <_ZN6X10_RX11convertDataEv+0x94>
	{
		convertedDataChar_ &= ~(1<<1);
 282:	84 89       	ldd	r24, Z+20	; 0x14
 284:	8d 7f       	andi	r24, 0xFD	; 253
 286:	84 8b       	std	Z+20, r24	; 0x14
 288:	06 c0       	rjmp	.+12     	; 0x296 <_ZN6X10_RX11convertDataEv+0x64>
	}
	else if (rawData_[4] == 1 && rawData_[5] == 0)
 28a:	85 85       	ldd	r24, Z+13	; 0x0d
 28c:	81 11       	cpse	r24, r1
 28e:	18 c0       	rjmp	.+48     	; 0x2c0 <_ZN6X10_RX11convertDataEv+0x8e>
	{
		convertedDataChar_ |= (1<<1);
 290:	84 89       	ldd	r24, Z+20	; 0x14
 292:	82 60       	ori	r24, 0x02	; 2
 294:	84 8b       	std	Z+20, r24	; 0x14
	{
		return 0;
	}

	// convert databit 3:
	if (rawData_[6] == 0 && rawData_[7] == 1)
 296:	86 85       	ldd	r24, Z+14	; 0x0e
 298:	81 11       	cpse	r24, r1
 29a:	07 c0       	rjmp	.+14     	; 0x2aa <_ZN6X10_RX11convertDataEv+0x78>
 29c:	87 85       	ldd	r24, Z+15	; 0x0f
 29e:	88 23       	and	r24, r24
 2a0:	91 f0       	breq	.+36     	; 0x2c6 <_ZN6X10_RX11convertDataEv+0x94>
	{
		convertedDataChar_ &= ~(1<<0);
 2a2:	94 89       	ldd	r25, Z+20	; 0x14
 2a4:	9e 7f       	andi	r25, 0xFE	; 254
 2a6:	94 8b       	std	Z+20, r25	; 0x14
 2a8:	08 95       	ret
	}
	else if (rawData_[6] == 1 && rawData_[7] == 0)
 2aa:	97 85       	ldd	r25, Z+15	; 0x0f
 2ac:	91 11       	cpse	r25, r1
 2ae:	0a c0       	rjmp	.+20     	; 0x2c4 <_ZN6X10_RX11convertDataEv+0x92>
	{
		convertedDataChar_ |= (1<<0);
 2b0:	94 89       	ldd	r25, Z+20	; 0x14
 2b2:	91 60       	ori	r25, 0x01	; 1
 2b4:	94 8b       	std	Z+20, r25	; 0x14
 2b6:	08 95       	ret
	{
		convertedDataChar_ |= (1<<3);
	}
	else
	{
		return 0;
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	08 95       	ret
	{
		convertedDataChar_ |= (1<<2);
	}
	else
	{
		return 0;
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	08 95       	ret
	{
		convertedDataChar_ |= (1<<1);
	}
	else
	{
		return 0;
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	08 95       	ret
	{
		convertedDataChar_ |= (1<<0);
	}
	else
	{
		return 0;
 2c4:	80 e0       	ldi	r24, 0x00	; 0
	}

	return 1;
}
 2c6:	08 95       	ret

000002c8 <_ZN6X10_RX9dataReadyEb>:
	}
	return;
}

bool X10_RX::dataReady(bool dataBit)
{
 2c8:	cf 93       	push	r28
 2ca:	df 93       	push	r29
 2cc:	ec 01       	movw	r28, r24
	newDataReady_ = false;
 2ce:	18 8e       	std	Y+24, r1	; 0x18
	
	if (receivingData_ == false)
 2d0:	8d 89       	ldd	r24, Y+21	; 0x15
 2d2:	81 11       	cpse	r24, r1
 2d4:	1a c0       	rjmp	.+52     	; 0x30a <_ZN6X10_RX9dataReadyEb+0x42>
 2d6:	fe 01       	movw	r30, r28
 2d8:	9e 01       	movw	r18, r28
 2da:	29 5f       	subi	r18, 0xF9	; 249
 2dc:	3f 4f       	sbci	r19, 0xFF	; 255
	{
		// Forskyd startBuffer 1 til højre
		for (int i = 0; i < 7; i++)
		{
			startBuffer_[i] = startBuffer_[i + 1];
 2de:	81 81       	ldd	r24, Z+1	; 0x01
 2e0:	81 93       	st	Z+, r24
	newDataReady_ = false;
	
	if (receivingData_ == false)
	{
		// Forskyd startBuffer 1 til højre
		for (int i = 0; i < 7; i++)
 2e2:	e2 17       	cp	r30, r18
 2e4:	f3 07       	cpc	r31, r19
 2e6:	d9 f7       	brne	.-10     	; 0x2de <_ZN6X10_RX9dataReadyEb+0x16>
		{
			startBuffer_[i] = startBuffer_[i + 1];
		}
		
		// Indsæt det databit som er modtaget på den bagerste plads
		startBuffer_[7] = dataBit;
 2e8:	6f 83       	std	Y+7, r22	; 0x07

		// Kontroller om arrayet er = startArray
		for (int i = 0; i < 8; i++)
		{
			if (startBuffer_[i] == startArray_[i])
 2ea:	98 81       	ld	r25, Y
 2ec:	89 8d       	ldd	r24, Y+25	; 0x19
 2ee:	98 17       	cp	r25, r24
 2f0:	41 f1       	breq	.+80     	; 0x342 <_ZN6X10_RX9dataReadyEb+0x7a>
 2f2:	09 c0       	rjmp	.+18     	; 0x306 <_ZN6X10_RX9dataReadyEb+0x3e>
 2f4:	91 91       	ld	r25, Z+
 2f6:	80 8d       	ldd	r24, Z+24	; 0x18
 2f8:	98 13       	cpse	r25, r24
 2fa:	05 c0       	rjmp	.+10     	; 0x306 <_ZN6X10_RX9dataReadyEb+0x3e>
			{
				receivingData_ = true;
 2fc:	2d 8b       	std	Y+21, r18	; 0x15
		
		// Indsæt det databit som er modtaget på den bagerste plads
		startBuffer_[7] = dataBit;

		// Kontroller om arrayet er = startArray
		for (int i = 0; i < 8; i++)
 2fe:	e4 17       	cp	r30, r20
 300:	f5 07       	cpc	r31, r21
 302:	c1 f7       	brne	.-16     	; 0x2f4 <_ZN6X10_RX9dataReadyEb+0x2c>
 304:	1c c0       	rjmp	.+56     	; 0x33e <_ZN6X10_RX9dataReadyEb+0x76>
			{
				receivingData_ = true;
			}
			else
			{
				receivingData_ = false;
 306:	1d 8a       	std	Y+21, r1	; 0x15
				break;
 308:	1a c0       	rjmp	.+52     	; 0x33e <_ZN6X10_RX9dataReadyEb+0x76>
		}
	}

	else if (receivingData_ == true )
	{
		if (bitCnt_ < 7)
 30a:	8e 89       	ldd	r24, Y+22	; 0x16
 30c:	9f 89       	ldd	r25, Y+23	; 0x17
 30e:	87 30       	cpi	r24, 0x07	; 7
 310:	91 05       	cpc	r25, r1
 312:	44 f4       	brge	.+16     	; 0x324 <_ZN6X10_RX9dataReadyEb+0x5c>
		{
			rawData_[bitCnt_] = dataBit;
 314:	fe 01       	movw	r30, r28
 316:	e8 0f       	add	r30, r24
 318:	f9 1f       	adc	r31, r25
 31a:	60 87       	std	Z+8, r22	; 0x08
			bitCnt_++;
 31c:	01 96       	adiw	r24, 0x01	; 1
 31e:	9f 8b       	std	Y+23, r25	; 0x17
 320:	8e 8b       	std	Y+22, r24	; 0x16
 322:	0d c0       	rjmp	.+26     	; 0x33e <_ZN6X10_RX9dataReadyEb+0x76>
		}
		else if (bitCnt_ == 7)
 324:	07 97       	sbiw	r24, 0x07	; 7
 326:	41 f4       	brne	.+16     	; 0x338 <_ZN6X10_RX9dataReadyEb+0x70>
		{
			rawData_[bitCnt_] = dataBit;
 328:	6f 87       	std	Y+15, r22	; 0x0f
			newDataReady_ = convertData();
 32a:	ce 01       	movw	r24, r28
 32c:	82 df       	rcall	.-252    	; 0x232 <_ZN6X10_RX11convertDataEv>
 32e:	88 8f       	std	Y+24, r24	; 0x18
			receivingData_ = false;
 330:	1d 8a       	std	Y+21, r1	; 0x15
			bitCnt_ = 0;
 332:	1f 8a       	std	Y+23, r1	; 0x17
 334:	1e 8a       	std	Y+22, r1	; 0x16
 336:	03 c0       	rjmp	.+6      	; 0x33e <_ZN6X10_RX9dataReadyEb+0x76>
		}
		else
		{
			receivingData_ = false;
 338:	1d 8a       	std	Y+21, r1	; 0x15
			bitCnt_ = 0;
 33a:	1f 8a       	std	Y+23, r1	; 0x17
 33c:	1e 8a       	std	Y+22, r1	; 0x16
		}
		
	}
	return newDataReady_;
 33e:	88 8d       	ldd	r24, Y+24	; 0x18
 340:	09 c0       	rjmp	.+18     	; 0x354 <_ZN6X10_RX9dataReadyEb+0x8c>
		// Kontroller om arrayet er = startArray
		for (int i = 0; i < 8; i++)
		{
			if (startBuffer_[i] == startArray_[i])
			{
				receivingData_ = true;
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	8d 8b       	std	Y+21, r24	; 0x15
 346:	fe 01       	movw	r30, r28
 348:	31 96       	adiw	r30, 0x01	; 1
 34a:	ae 01       	movw	r20, r28
 34c:	48 5f       	subi	r20, 0xF8	; 248
 34e:	5f 4f       	sbci	r21, 0xFF	; 255
 350:	21 e0       	ldi	r18, 0x01	; 1
 352:	d0 cf       	rjmp	.-96     	; 0x2f4 <_ZN6X10_RX9dataReadyEb+0x2c>
			bitCnt_ = 0;
		}
		
	}
	return newDataReady_;
}
 354:	df 91       	pop	r29
 356:	cf 91       	pop	r28
 358:	08 95       	ret

0000035a <_ZN6X10_RX7getDataEv>:
}

char X10_RX::getData()
{
	return convertedDataChar_;
}
 35a:	fc 01       	movw	r30, r24
 35c:	84 89       	ldd	r24, Z+20	; 0x14
 35e:	08 95       	ret

00000360 <main>:
#include "X10_RX.h"
#include "lampDriver.h"
char state = 'I'; // I = Idle, R = Receiving

int main(void)
{		
 360:	cf 93       	push	r28
 362:	df 93       	push	r29
 364:	cd b7       	in	r28, 0x3d	; 61
 366:	de b7       	in	r29, 0x3e	; 62
 368:	a2 97       	sbiw	r28, 0x22	; 34
 36a:	0f b6       	in	r0, 0x3f	; 63
 36c:	f8 94       	cli
 36e:	de bf       	out	0x3e, r29	; 62
 370:	0f be       	out	0x3f, r0	; 63
 372:	cd bf       	out	0x3d, r28	; 61
	X10_RX lampReceiver(2);
 374:	62 e0       	ldi	r22, 0x02	; 2
 376:	70 e0       	ldi	r23, 0x00	; 0
 378:	ce 01       	movw	r24, r28
 37a:	01 96       	adiw	r24, 0x01	; 1
 37c:	e2 de       	rcall	.-572    	; 0x142 <_ZN6X10_RXC1Ei>
	lampDriver myLamp;
 37e:	ce 01       	movw	r24, r28
 380:	82 96       	adiw	r24, 0x22	; 34
 382:	c8 de       	rcall	.-624    	; 0x114 <_ZN10lampDriverC1Ev>
	bool newDataReady = false; //Fortæller hvornår der er et helt datasæt uden fejl klar
	char dataChar = 0; // char som indeholder det sidst modtagne data
	
	myLamp.turnOnLED();
 384:	ce 01       	movw	r24, r28
 386:	82 96       	adiw	r24, 0x22	; 34
 388:	d0 de       	rcall	.-608    	; 0x12a <_ZN10lampDriver9turnOnLEDEv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 38a:	2f ef       	ldi	r18, 0xFF	; 255
 38c:	8b e7       	ldi	r24, 0x7B	; 123
 38e:	92 e9       	ldi	r25, 0x92	; 146
 390:	21 50       	subi	r18, 0x01	; 1
 392:	80 40       	sbci	r24, 0x00	; 0
 394:	90 40       	sbci	r25, 0x00	; 0
 396:	e1 f7       	brne	.-8      	; 0x390 <main+0x30>
 398:	00 c0       	rjmp	.+0      	; 0x39a <main+0x3a>
	_delay_ms(3000);
	myLamp.turnOffLED();
 39a:	00 00       	nop
 39c:	ce 01       	movw	r24, r28
 39e:	82 96       	adiw	r24, 0x22	; 34
 3a0:	ca de       	rcall	.-620    	; 0x136 <_ZN10lampDriver10turnOffLEDEv>
	
	
	sei();				// Enable Interrupt
 3a2:	78 94       	sei
		// Hvis state er = 'R' vil det sige at der har været et zerocrossing interrupt. 
		// Derfor skal dataReady kaldes
		if (state == 'R')
		{
			_delay_us(400); // vent til midten af burst som er 1ms
			newDataReady = lampReceiver.dataReady(PINH & (1 << 5)); //dataReady() returnerer true hvis der er et helt datasæt uden fejl klar.
 3a4:	e1 2c       	mov	r14, r1
 3a6:	ff 24       	eor	r15, r15
 3a8:	f3 94       	inc	r15
			state = 'I';
 3aa:	19 e4       	ldi	r17, 0x49	; 73
	
    while (1) 
    {
		// Hvis state er = 'R' vil det sige at der har været et zerocrossing interrupt. 
		// Derfor skal dataReady kaldes
		if (state == 'R')
 3ac:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 3b0:	82 35       	cpi	r24, 0x52	; 82
 3b2:	e1 f7       	brne	.-8      	; 0x3ac <main+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3b4:	ef e3       	ldi	r30, 0x3F	; 63
 3b6:	f6 e0       	ldi	r31, 0x06	; 6
 3b8:	31 97       	sbiw	r30, 0x01	; 1
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <main+0x58>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <main+0x5e>
 3be:	00 00       	nop
		{
			_delay_us(400); // vent til midten af burst som er 1ms
			newDataReady = lampReceiver.dataReady(PINH & (1 << 5)); //dataReady() returnerer true hvis der er et helt datasæt uden fejl klar.
 3c0:	f7 01       	movw	r30, r14
 3c2:	60 81       	ld	r22, Z
 3c4:	65 fb       	bst	r22, 5
 3c6:	66 27       	eor	r22, r22
 3c8:	60 f9       	bld	r22, 0
 3ca:	ce 01       	movw	r24, r28
 3cc:	01 96       	adiw	r24, 0x01	; 1
 3ce:	7c df       	rcall	.-264    	; 0x2c8 <_ZN6X10_RX9dataReadyEb>
			state = 'I';
 3d0:	10 93 00 02 	sts	0x0200, r17	; 0x800200 <__DATA_REGION_ORIGIN__>
		}
		
		
		if (newDataReady == true)
 3d4:	88 23       	and	r24, r24
		{
			dataChar = lampReceiver.getData();
 3d6:	51 f3       	breq	.-44     	; 0x3ac <main+0x4c>
 3d8:	ce 01       	movw	r24, r28
 3da:	01 96       	adiw	r24, 0x01	; 1
			
			if (dataChar == (0b00000001))
 3dc:	be df       	rcall	.-132    	; 0x35a <_ZN6X10_RX7getDataEv>
 3de:	81 30       	cpi	r24, 0x01	; 1
			{
				myLamp.turnOffLED();
 3e0:	21 f4       	brne	.+8      	; 0x3ea <main+0x8a>
 3e2:	ce 01       	movw	r24, r28
 3e4:	82 96       	adiw	r24, 0x22	; 34
 3e6:	a7 de       	rcall	.-690    	; 0x136 <_ZN10lampDriver10turnOffLEDEv>
			}
			else if (dataChar == (0b00000010))
 3e8:	e1 cf       	rjmp	.-62     	; 0x3ac <main+0x4c>
 3ea:	82 30       	cpi	r24, 0x02	; 2
			{
				myLamp.turnOnLED();
 3ec:	f9 f6       	brne	.-66     	; 0x3ac <main+0x4c>
 3ee:	ce 01       	movw	r24, r28
 3f0:	82 96       	adiw	r24, 0x22	; 34
 3f2:	9b de       	rcall	.-714    	; 0x12a <_ZN10lampDriver9turnOnLEDEv>
 3f4:	db cf       	rjmp	.-74     	; 0x3ac <main+0x4c>

000003f6 <__vector_1>:
		
    }
}

ISR(INT0_vect)
{
 3f6:	1f 92       	push	r1
 3f8:	0f 92       	push	r0
 3fa:	0f b6       	in	r0, 0x3f	; 63
 3fc:	0f 92       	push	r0
 3fe:	11 24       	eor	r1, r1
 400:	8f 93       	push	r24
	state = 'R';
 402:	82 e5       	ldi	r24, 0x52	; 82
 404:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
}
 408:	8f 91       	pop	r24
 40a:	0f 90       	pop	r0
 40c:	0f be       	out	0x3f, r0	; 63
 40e:	0f 90       	pop	r0
 410:	1f 90       	pop	r1
 412:	18 95       	reti

00000414 <_exit>:
 414:	f8 94       	cli

00000416 <__stop_program>:
 416:	ff cf       	rjmp	.-2      	; 0x416 <__stop_program>
